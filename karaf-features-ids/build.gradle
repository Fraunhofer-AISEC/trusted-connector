apply plugin: 'com.github.lburgazzoli.karaf'

description = 'IDS Karaf Feature'

ext {
    bundleDependencies = []
    bundleConfigurations = []
}

rootProject.configurations.findAll { it.name.endsWith('Bundle') }.each { project.ext.bundleConfigurations.add(it.name) }

rootProject.subprojects.findAll { it.name.matches("(^(camel|ids)-.*|.*-(patch|wrapper)\$)") }.each { p ->
    Boolean included = false
    // Include each sub-project declaring dependencies with a configuration ending on "Bundle",
    // using exactly that configuration for the dependency itself and selection of additional recursive dependencies.
    p.configurations.findAll { it.name.endsWith("Bundle") || it.name.endsWith("Feature") }.each { c ->
        // Resolve the configuration to obtain dependencies
        c.resolve()
        if (c.dependencies.size() > 0) {
            included = true
            project.ext.bundleDependencies.add([configuration: c.name, subproject: p.name])
        }
    }
    // If project has not been included, include it using "providedByBundle"
    if (!included) {
        project.ext.bundleDependencies.add([configuration: 'providedByBundle', subproject: p.name])
    }
}

dependencies {
    // Include the dependencies calculated above
    project.ext.bundleDependencies.each {
        add("$it.configuration", project(path: ":$it.subproject", configuration: it.configuration))
    }
    zmqFeature group: 'org.apache-extras.camel-extra', name: 'camel-zeromq', version: libraryVersions.camelZeroMQ
    providedByBundle group: 'org.jetbrains.kotlin', name: 'kotlin-osgi-bundle', version: libraryVersions.kotlin
}

karaf {
    features {
        xsdVersion  = '1.3.0'
        // it seems to be best practice to include the version in the feature repository as well
        name = "ids-${project.version}"
        version = project.version

        // the camel repository
        repository "mvn:org.apache.camel.karaf/apache-camel/${libraryVersions.camel}/xml/features"

        // include cxf repository, since the camel one is slightly outdated
//        repository "mvn:org.apache.cxf.karaf/apache-cxf/${libraryVersions.cxf}/xml/features"
        
        feature {
            name = 'ids'
            description = 'IDS Feature'

            // only specifiy the dependencies that will be provided by bundles, the rest will be specified via features
            configurations(*project.ext.bundleConfigurations)

            // standard feature, but we need to explicitly state it here so that it gets installed in our bare Karaf
            feature 'jetty'

            // CXF for REST APIs
            feature 'cxf-jaxrs'
            feature 'cxf-jackson'

            // CXF commands for the shell
            /*
             Notice: This should actually be a conditional dependency, only if shell is available.
             however the karaf assemble plugin does not seem to resolve these conditions during packaging.
            */
            feature 'cxf-commands'

		    // For Web Application Bundles, such as our WebConsole
            feature 'war'

            // Features for Apache Camel routing
            feature 'camel-jackson'
            feature 'camel-milo'
            feature 'camel-cxf'
            feature 'camel-ahc'
            feature 'camel-http'
            feature 'camel-jetty'
            feature 'camel-paho'
            //feature 'camel-mqtt'
            feature 'camel-jsonpath'

            // start our bundles a lit bit later
            bundle ('de.fhg.aisec.ids') {
                attribute 'start-level', '90'
            }
        }

        feature {
            name = 'camel-influxdb-aisec'
            description = 'Correctly packed version of camel-influxdb feature'
            version = libraryVersions.camel

            //noinspection GroovyAssignabilityCheck
            configurations 'influxFeature'
        }

        feature {
            name = 'camel-zeromq-aisec'
            description = 'Camel ZeroMQ feature'
            version = libraryVersions.camelZeroMQ

            //noinspection GroovyAssignabilityCheck
            configurations 'zmqFeature'
        }
    }
}
