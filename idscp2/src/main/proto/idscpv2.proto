syntax = "proto3";
option java_package = "de.fhg.aisec.ids.messages";
option java_outer_classname = "IDSCPv2";

//IDSCP message frame
message IdscpMessage {
  // One of the following will be filled in.
  oneof message {
    IdscpHello idscpHello = 1;
    IdscpClose idscpClose = 2;
    IdscpDatExpired idscpDatExpired = 3;
    IdscpDat idscpDat = 4;
    IdscpReRat idscpReRat = 5;
    IdscpRatProver idscpRatProver = 6;
    IdscpRatVerifier idscpRatVerifier = 7;
    IdscpData idscpData = 8;
  }
}

// IDSCP messages

message IdscpHello {
  // IDSCP protocol version
  int32 version = 1;
  // Initial dynamic attribute token (DAT)
  IdscpDat dynamicAttributeToken = 2;
  // Set of supported remote attestation (RAT) methods (prover role)
  repeated string supportedRatSuite = 3;
  // Set of accepted RAT methods (verifier role)
  repeated string expectedRatSuite = 4;
  // Maximum number of supported message type cache entries
  int32 maxCacheEntries = 5;
  // Maximum supported total length of type cache entries in UTF-8
  int32 maxTotalCacheSize = 6;
}

message IdscpClose {

  enum CloseCause {
    USER_SHUTDOWN = 0;
    TIMEOUT = 1;
    ERROR = 2;
    NO_VALID_DAT = 3;
    NO_RAT_MECHANISM_MATCH_PROVER = 4;
    NO_RAT_MECHANISM_MATCH_VERIFIER = 5;
    RAT_PROVER_FAILED = 6;
    RAT_VERIFIER_FAILED = 7;
  }

  CloseCause cause_code = 1;
  string cause_msg = 2;
}

// For requesting new DAT
message IdscpDatExpired {
}

message IdscpDat {
  bytes token = 1;
}

// For requesting new RAT
message IdscpReRat {
  string cause = 1;
}

message IdscpRatProver {
  bytes data = 1;
}

message IdscpRatVerifier {
  bytes data = 1;
}

message IdscpData {
  // Payload
  bytes data = 1;
  // Message type (e.g. MIME type) as string
  string type = 2;
  // Integer for cached types or type caching
  int32 typeTag = 3;
}