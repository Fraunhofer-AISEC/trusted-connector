<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<artifactId>ids-webconsole</artifactId>
	<packaging>jar</packaging>

	<parent>
		<groupId>de.fhg.ids</groupId>
		<artifactId>core-platform</artifactId>
		<version>1.1.0-SNAPSHOT</version>
	</parent>

	<name>IDS Core Platform Webconsole</name>

	<properties>
		<skipAngular>false</skipAngular>
	</properties>

	<dependencies>
		<!-- IDS interfaces -->
		<dependency>
			<groupId>de.fhg.ids</groupId>
			<artifactId>ids-api</artifactId>
			<version>${project.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- for REST API -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
		</dependency>

		<!-- servlets -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>

		<!-- Camel -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core-osgi</artifactId>
		</dependency>

		<!-- OSGi core framework and compendium services -->
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.framework</artifactId>
		</dependency>

		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.compendium</artifactId>
		</dependency>

		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jaxrs</artifactId>
			<version>1.5.18</version>
		</dependency>

		<!-- JSON support -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-extension-providers</artifactId>
			<version>${cxf.version}</version>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>

		<!-- for testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Local CXF transports only for testing -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-local</artifactId>
			<version>${cxf.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-rs-client</artifactId>
			<version>${cxf.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${jackson.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>install</defaultGoal>

		<!-- Do not copy everything from src/main/resources, but rather only blueprint 
			descriptor and compiled Angular stuff -->
		<resources>
			<resource>
				<directory>src/main/resources/</directory>
				<includes>
					<include>www/dist</include>
					<include>OSGI-INF/**</include>
				</includes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<configuration>
					<excludeFilterFile>${project.basedir}/spotbugs-exclusions.xml</excludeFilterFile>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<!-- This plugin creates an OSGi-compliant MANIFEST.MF from your bnd.cnf -->
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-maven-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<goals>
							<goal>bnd-process</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- The following configuration is required because bnd-maven-plugin 
				generates the manifest to target/classes/META-INF/MANIFEST.MF but the normal 
				maven-jar-plugin does not use it. If the jar-plugin is patched to pick up 
				the manifest from this location, then the following config is not needed. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.3.2</version>

				<executions>
					<!-- Required: The following will ensure `yarn install` is called before 
						anything else during the 'Default Lifecycle' -->
					<execution>
						<id>yarn install (initialize)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>initialize</phase>
						<configuration>
							<executable>yarn</executable>
							<arguments>
								<argument>install</argument>
								<argument>--no-progress</argument>
								<argument>--non-interactive</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Optional: The following will output the yarn configuration. I do 
						this so my CI logs will show the yarn information used for the build -->
					<execution>
						<id>yarn config list (validate)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>validate</phase>
						<configuration>
							<executable>yarn</executable>
							<arguments>
								<argument>config</argument>
								<argument>list</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Required: The following calls `yarn run lint` which ensures that 
						the code is free of recognizable linting errors with may corrupt the productive 
						build -->
					<execution>
						<id>yarn run lint (linting)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<executable>yarn</executable>
							<arguments>
								<argument>run</argument>
								<argument>lint</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Required: This following calls `yarn run build` where 'build' is 
						the script name I used in my project, change this if yours is different -->
					<execution>
						<id>yarn run bundle (compile)</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>compile</phase>
						<configuration>
							<executable>yarn</executable>
							<arguments>
								<argument>run</argument>
								<argument>bundle</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Generate nicely layouted static API HTML documentation from swagger.json -->
					<!-- Disabled because this would need to run later, i.e. AFTER swagger.json is created but due
					to weird maven behaviour we cannot set the phase of this execution to site because otherwise all the
					previous exec tasks would be run again... -->
					<!--<execution>
						<id>yarn run apidocs</id>
						<goals>
							<goal>exec</goal>
						</goals>
						<phase>compile</phase>
						<configuration>
							<executable>yarn</executable>
							<arguments>
								<argument>run</argument>
								<argument>apidocs</argument>
							</arguments>
						</configuration>
					</execution>-->
				</executions>
				<configuration>
					<workingDirectory>${project.build.resources[0].directory}/www</workingDirectory>
					<skip>${skipAngular}</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<apiSources>
						<apiSource>
							<springmvc>false</springmvc>
							<locations>
                                de.fhg.aisec.ids.webconsole.api
                            </locations>
							<schemes>http</schemes>
							<host>localhost:8181</host>
							<basePath>/</basePath>
							<info>
								<title>Trusted Connector API</title>
								<version>v1</version>
								<license>
									<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
									<name>Apache 2.0</name>
								</license>
                                <description>
                                    This is the internal API of the Trusted Connector.

                                    The API provides an administrative interface to manage the Trusted Connector at runtime and is used by the default administration dashboard ("webconsole"). Please note that at the moment the Trusted Connector is in a prototype state and this API does not provide any authorization mechanism.
                                </description>
							</info>
							<swaggerDirectory>${basedir}/generated/swagger-ui</swaggerDirectory>
                            <swaggerApiReader>com.wordnik.swagger.jaxrs.reader.DefaultJaxrsApiReader</swaggerApiReader> 
						</apiSource>
					</apiSources>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											exec-maven-plugin
										</artifactId>
										<versionRange>
											[1.3.2,)
										</versionRange>
										<goals>
											<goal>exec</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
