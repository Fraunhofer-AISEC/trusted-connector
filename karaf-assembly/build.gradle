apply plugin: DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.DockerRemoteApiPlugin
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

dependencies {
    testImplementation(project(':ids-api')) { transitive = false }

    osgiCore group: 'org.apache.felix', name: 'org.apache.felix.framework', version: libraryVersions.felixFramework
    osgiCore group: 'org.osgi', name: 'osgi.cmpn', version: libraryVersions.osgiCompendium
    testImplementation group: 'org.apache.karaf.features', name: 'org.apache.karaf.features.core', version: libraryVersions.karaf
}

/*
Now this is tricky. We need to build a custom assembly of karaf with a few features:
- included ids feature
- deactivated all other repos, basically make it being 'offline'
- add a bunch of configuration files in etc (although we need to re-verify, which of them are really necessary

Since gradle still has no karaf-assembly plugin we need to do this using maven (meh!)
*/

ext.BRANDING_WIDTH = 84

def getBrandingAligned(String branding, String space = "\\u0020") {
    def sb = new StringBuilder()
    def spaces = (BRANDING_WIDTH - branding.length()) / 2
    for (int i = 0; i < spaces; ++i) {
        sb.append(space);
    }
    sb.append(branding)
    return sb.toString()
}

task parsePom(type: Copy) {
    from (project.projectDir) {
        include 'pom.template.xml'
    }
    expand('projectVersion': project.version, 'karafVersion': libraryVersions.karaf,
        'brandingFirst': getBrandingAligned("Trusted Connector Console (${project.version}), " +
                "Apache Karaf (${libraryVersions.karaf})"),
        'brandingSecond': getBrandingAligned("Fraunhofer AISEC ${new Date()[Calendar.YEAR].toString()}"))
    rename 'pom.template.xml', 'pom.xml'
    into project.projectDir
}
parsePom.inputs.property('projectVersion', project.version)
parsePom.inputs.property('karafVersion', libraryVersions.karaf)

task assembleKaraf(type: CrossPlatformExec) {
    commandLine "./mvnw", "--no-transfer-progress", "clean", "package"
}
assembleKaraf.dependsOn(parsePom)
jar.dependsOn(assembleKaraf)

// make sure, all sub projects have finished their install task
rootProject.subprojects.findAll() {
    if (it.name != project.name) {
        assembleKaraf.dependsOn(it.tasks.install)
    }
}

task dockerize(type: DockerBuildImage) {
    inputDir = project.projectDir
    images.add("fraunhoferaisec/trusted-connector-core:${rootProject.getDockerTag()}")
}

dockerize.dependsOn(assembleKaraf)

integrationTest.dependsOn(jar)