dependencies {
    testImplementation(project(":ids-api")) { transitive = false }

    osgiCore group: "org.apache.felix", name: "org.apache.felix.framework", version: libraryVersions.felixFramework
    osgiCore group: "org.osgi", name: "osgi.cmpn", version: libraryVersions.osgiCompendium

    testImplementation group: "org.ops4j.pax.exam", name: "pax-exam", version: libraryVersions.paxExam
    testImplementation group: "org.ops4j.pax.exam", name: "pax-exam-junit4", version: libraryVersions.paxExam
    testImplementation group: "org.ops4j.pax.exam", name: "pax-exam-container-karaf",
            version: libraryVersions.paxExam
    testImplementation group: "org.apache.karaf.itests", name: "common", version: libraryVersions.karaf

    testImplementation group: "org.apache.karaf", name: "apache-karaf", version: libraryVersions.karaf, ext: "pom"
    testImplementation group: "org.awaitility", name: "awaitility", version: libraryVersions.awaitility
    testImplementation group: "org.apache.servicemix.bundles", name: "org.apache.servicemix.bundles.hamcrest",
            version: libraryVersions.servicemixHamcrest
    testImplementation group: "javax.annotation", name: "javax.annotation-api",
            version: libraryVersions.javaxAnnotation
}

static def getBrandingAligned(String branding, String space = "\\u0020") {
    int BRANDING_WIDTH = 84
    def sb = new StringBuilder()
    def spaces = (BRANDING_WIDTH - branding.length()) / 2
    for (int i = 0; i < spaces; ++i) {
        sb.append(space)
    }
    sb.append(branding)
    return sb.toString()
}

task parsePom(type: Copy) {
    from (project.projectDir) {
        include "pom.template.xml"
    }
    expand("projectVersion": project.version, "karafVersion": libraryVersions.karaf, "paxVersion": libraryVersions.pax,
        "brandingFirst": getBrandingAligned("Trusted Connector Console (${project.version}), " +
                "Apache Karaf (${libraryVersions.karaf})"),
        "brandingSecond": getBrandingAligned("Fraunhofer AISEC ${new Date()[Calendar.YEAR].toString()}"))
    rename "pom.template.xml", "pom.xml"
    into project.projectDir
}
parsePom.inputs.property("projectVersion", project.version)
parsePom.inputs.property("karafVersion", libraryVersions.karaf)

/*
Now this is tricky. We need to build a custom distribution of karaf with a few features:
- included ids feature
- a bunch of configuration files in etc

Since gradle still has no karaf-assembly plugin we need to do this using maven (meh!)
*/
task assembleKaraf(type: CrossPlatformExec) {
    commandLine "./mvnw", "--no-transfer-progress", "clean", "package"
}
// Sometimes required to fix an error caused by a non-existing folder (maybe caused by mvn clean)
assembleKaraf.doLast {
    mkdir("${project.buildDir}/classes/kotlin/test")
}
assembleKaraf.dependsOn(parsePom)
jar.dependsOn(assembleKaraf)

// Wait for all relevant sub projects before executing assembly process
rootProject.subprojects.findAll() {
    if (it.name.startsWith("ids") || it.name.startsWith("camel-")
            || it.name.endsWith("-patch") || it.name.endsWith("-wrapper")
            || it.name == "karaf-features-ids") {
        assembleKaraf.dependsOn(it.tasks.install)
    }
}

// The PaxExam config of KarafTestSupport requires the maven dependency meta information generated here
task makeMavenDependencies {
    File outputFileDir = project.file("build/classes/java/test/META-INF/maven/")
    File outputFile = new File(outputFileDir, "dependencies.properties")
    outputs.file(outputFile)

    doFirst {
        Properties properties = new Properties()

        // information of the project itself
        properties.setProperty("groupId", "${project.group}")
        properties.setProperty("artifactId", project.name)
        properties.setProperty("version", "${project.version}")
        properties.setProperty("${project.group}/${project.name}/version", "${project.version}")

        // information of all test runtime dependencies
        project.configurations.testCompileClasspath.resolvedConfiguration.resolvedArtifacts.each {
            final String keyBase = it.moduleVersion.id.group + "/" + it.moduleVersion.id.name
            properties.setProperty("${keyBase}/scope", "compile")
            properties.setProperty("${keyBase}/type", it.extension)
            properties.setProperty("${keyBase}/version", it.moduleVersion.id.version)
        }

        outputFileDir.mkdirs()
        new FileOutputStream(outputFile).withStream {
            properties.store(it, "Generated from Gradle for PaxExam integration tests")
        }
    }
}

integrationTest.dependsOn(makeMavenDependencies)
integrationTest.dependsOn(assembleKaraf)
integrationTest.outputs.upToDateWhen { false }