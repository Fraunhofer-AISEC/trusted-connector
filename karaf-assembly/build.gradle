dependencies {
    testImplementation(project(':ids-api')) { transitive = false }

    osgiCore group: 'org.apache.felix', name: 'org.apache.felix.framework', version: libraryVersions.felixFramework
    osgiCore group: 'org.osgi', name: 'osgi.cmpn', version: libraryVersions.osgiCompendium
    testImplementation group: 'org.apache.karaf.features', name: 'org.apache.karaf.features.core', version: libraryVersions.karaf
}

/*
Now this is tricky. We need to build a custom assembly of karaf with a few features:
- included ids feature
- deactivated all other repos, basically make it being 'offline'
- add a bunch of configuration files in etc (although we need to re-verify, which of them are really necessary

Since gradle still has no karaf-assembly plugin we need to do this using maven (meh!)
*/

static def getBrandingAligned(String branding, String space = "\\u0020") {
    int BRANDING_WIDTH = 84
    def sb = new StringBuilder()
    def spaces = (BRANDING_WIDTH - branding.length()) / 2
    for (int i = 0; i < spaces; ++i) {
        sb.append(space)
    }
    sb.append(branding)
    return sb.toString()
}

task parsePom(type: Copy) {
    from (project.projectDir) {
        include 'pom.template.xml'
    }
    expand('projectVersion': project.version, 'karafVersion': libraryVersions.karaf, 'paxVersion': libraryVersions.pax,
        'brandingFirst': getBrandingAligned("Trusted Connector Console (${project.version}), " +
                "Apache Karaf (${libraryVersions.karaf})"),
        'brandingSecond': getBrandingAligned("Fraunhofer AISEC ${new Date()[Calendar.YEAR].toString()}"))
    rename 'pom.template.xml', 'pom.xml'
    into project.projectDir
}
parsePom.inputs.property('projectVersion', project.version)
parsePom.inputs.property('karafVersion', libraryVersions.karaf)

task assembleKaraf(type: CrossPlatformExec) {
    commandLine "./mvnw", "--no-transfer-progress", "clean", "package"
}
// Sometimes required to fix an error caused by a non-existing folder (maybe caused by mvn clean)
assembleKaraf.doLast {
    mkdir("${project.buildDir}/classes/kotlin/test")
}
assembleKaraf.dependsOn(parsePom)
jar.dependsOn(assembleKaraf)

// Wait for all relevant sub projects before executing assembly process
rootProject.subprojects.findAll() {
    if (it.name.startsWith("ids-") || it.name.startsWith("camel-")
            || it.name.endsWith("-patch") || it.name.endsWith("-wrapper")
            || it.name == "karaf-features-ids") {
        assembleKaraf.dependsOn(it.tasks.install)
    }
}

integrationTest.dependsOn(jar)