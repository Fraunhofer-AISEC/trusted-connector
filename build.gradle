import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.yaml:snakeyaml:1.26")
    }
}

plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.10'
    id 'com.moowork.node' version '1.3.1'
    id 'biz.aQute.bnd' version '4.2.0' apply false
    id 'com.github.lburgazzoli.karaf' version '0.5.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.71'
    id 'com.github.jlouns.cpe' version '0.5.0'
    id 'com.benjaminsproule.swagger' version '1.0.6'
    id 'com.diffplug.gradle.spotless' version '3.13.0'
    id 'com.github.jk1.dependency-license-report' version '1.2'
}

licenseReport {
    configurations = ['compile', 'providedByFeature', 'providedByBundle']
}

allprojects {
    group = 'de.fhg.aisec.ids'
    version = '3.0.2'

    ext.libraryVersions = new Yaml().loadAs(new FileInputStream(file("${rootDir}/libraryVersions.yaml")), Map.class)

    configurations {
        // just to make bills of materials (bom) easier to see in the dependency tree
        bom

        // Configuration for dependencies that will be provided through features in the OSGi environment
        providedByFeature

        // Configurations for dependencies that will be provided through bundles in the OSGi environment
        // Separate configurations are required when two bundles depend on different versions of the same bundle!
        providedByBundle
        unixSocketBundle
        infomodelBundle

        // Configurations for bundles grouped to dedicated features apart from the main ids feature
        influxFeature
        zmqFeature

        // OSGi core dependencies which will just be there during runtime
        osgiCore

        // For artifacts that should be included as "compile" dependencies into published maven artifacts
        publishCompile

        // The "compile" configuration needs to be extended for dependency resolution of maven-publish
        compile.extendsFrom providedByFeature, providedByBundle, unixSocketBundle, infomodelBundle, osgiCore, publishCompile
        // Some compileOnly dependencies are also needed for unit tests
        testImplementation.extendsFrom compileOnly
    }

    repositories {
        mavenCentral()
        jcenter()
        // References IAIS repository that contains the infomodel artifacts
        maven {
            url 'https://maven.iais.fraunhofer.de/artifactory/eis-ids-public/'
        }
    }
}

subprojects {
    apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'kotlin'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    test {
        exclude '**/*IT.*'
    }

    task integrationTest(type: Test) {
        include '**/*IT.*'
        systemProperty "project.version", "$project.version"
    }

    tasks.withType(Test) {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

    check.dependsOn integrationTest

    // define some Bill of Materials (BOM) for all subprojects
    dependencies {
        // BOM from Karaf, sets common version for OSGi libraries
        bom group: 'org.apache.karaf', name: 'karaf', version: libraryVersions.karaf

        // BOM for pax, for jetty, etc.
        bom group: 'org.ops4j.pax', name: 'web', version: libraryVersions.pax

        // Needed for kotlin modules, provided at runtime via kotlin-osgi-bundle in karaf-features-ids
        compileOnly group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: libraryVersions.kotlin

        // Required for successful build with JDK 11
        compileOnly group: "javax.xml.bind", name: "jaxb-api", version: libraryVersions.jaxb
        testImplementation group: "javax.xml.bind", name: "jaxb-api", version: libraryVersions.jaxb
        testImplementation group: "com.sun.xml.bind", name: "jaxb-core", version: libraryVersions.jaxb
        testImplementation group: "com.sun.xml.bind", name: "jaxb-impl", version: libraryVersions.jaxb
        testImplementation group: 'com.sun.activation', name: 'javax.activation', version: libraryVersions.jaxActivation

        testImplementation "org.ops4j.pax.exam:pax-exam-container-karaf:${libraryVersions.paxExam}"
        testImplementation "org.ops4j.pax.exam:pax-exam-junit4:${libraryVersions.paxExam}"
        testImplementation "org.ops4j.pax.exam:pax-exam:${libraryVersions.paxExam}"
        testImplementation "org.ops4j.pax.url:pax-url-aether:2.4.3"
        testImplementation "javax.inject:javax.inject:1"
        testImplementation "org.slf4j:slf4j-simple:1.7.12"
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
//        options.compilerArgs << '-Xlint:unchecked'
//        options.deprecation = true
    }

    tasks.withType(Jar) {
        jar {
            manifest {
                // set the vendor
                attributes 'Bundle-Vendor': 'Fraunhofer AISEC'

                // TODO: this was set in most of the bnd files. do we really need this?
                attributes '-noee': true
            }
        }
    }
}

configure(subprojects.findAll { it.name != 'examples' }) {
    apply plugin: 'com.diffplug.gradle.spotless'

    spotless {
        java {
            enforceCheck = false // do not really check for now, we first need to format all the files

            googleJavaFormat()

            licenseHeader('''/*-
 * ========================LICENSE_START=================================
 * ''' + project.name + '''
 * %%
 * Copyright (C) $YEAR Fraunhofer AISEC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */''').yearSeparator(' - ')
        }
    }
}

configure(subprojects.findAll { it.name == 'ids-api' || it.name == 'ids-comm' }) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        from ('src/main') {
            include 'proto/**'
        }
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    // Must disable gradle metadata because of infomodel SNAPSHOT dependencies
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    publishing {
        publications {
            idsLibrary(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'IDSCP Protocol Library'
                    description = 'Contains the WebSocket-based Industrial Data Space Communication Protocol (IDSCP)'
                    url = 'https://github.com/industrial-data-space/trusted-connector'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'Michael Lux'
                            email = 'michael.lux@aisec.fraunhofer.de'
                            organization = 'Fraunhofer AISEC'
                            organizationUrl = 'aisec.fraunhofer.de'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com:industrial-data-space/trusted-connector.git'
                        developerConnection = 'scm:git:ssh://github.com:industrial-data-space/trusted-connector.git'
                        url = 'https://github.com/industrial-data-space/trusted-connector'
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = project.findProperty('deployUsername')
                    password = project.findProperty('deployPassword')
                }
            }
        }
    }

    signing {
        useGpgCmd()
        sign publishing.publications.idsLibrary
    }
}

// Always write project version to version.txt after build/install
task dumpVersion {
    new File(project.projectDir, "version.txt").text = project.version
}