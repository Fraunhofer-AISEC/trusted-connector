apply plugin: DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.DockerRemoteApiPlugin
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

description = 'rat-repository'

dependencies {
    implementation(project(':ids-api')) { transitive = false }

    // Java 11 javax.xml.bind polyfills
    implementation group: "javax.xml.bind", name: "jaxb-api", version: libraryVersions.jaxb
    implementation group: "com.sun.xml.bind", name: "jaxb-core", version: libraryVersions.jaxb
    implementation group: "com.sun.xml.bind", name: "jaxb-impl", version: libraryVersions.jaxb
    implementation group: 'com.sun.activation', name: 'javax.activation', version: libraryVersions.jaxActivation

    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: libraryVersions.log4j
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: libraryVersions.log4j
    
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.30.1'
    implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: libraryVersions.jetty
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: libraryVersions.jetty

    implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: libraryVersions.jersey
    implementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: libraryVersions.jersey
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: libraryVersions.jersey
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: libraryVersions.jersey

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'

    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: libraryVersions.protobuf

    testCompile group: 'org.apache.camel', name: 'camel-test', version: libraryVersions.camel
    testCompile group: 'junit', name: 'junit', version: libraryVersions.junit4
}

jar {
    manifest {
        attributes('Main-Class': 'de.fhg.aisec.ids.attestation.Start')
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task dockerize(type: DockerBuildImage) {
    inputDir = project.projectDir
    buildArgs = ["VERSION": "${version}"]
    images.add("fraunhoferaisec/ttpsim:${rootProject.getDockerTag()}")
}
dockerize.dependsOn jar