<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd">

    <camel:sslContextParameters id="rootClientSslContext" certAlias="1">
        <camel:keyManagers keyPassword="password">
            <camel:keyStore resource="etc/keystore.p12" password="password"/>
        </camel:keyManagers>
        <camel:trustManagers>
            <camel:keyStore resource="etc/truststore.p12" password="password"/>
        </camel:trustManagers>
    </camel:sslContextParameters>

    <bean id="rootDaps" class="de.fhg.aisec.ids.idscp2.beans.AisecDapsDriverFactoryBean">
        <property name="dapsUrl" value="https://daps-dev.aisec.fraunhofer.de/v4"/>
        <property name="dapsSslParameters" ref="rootClientSslContext"/>
        <property name="transportCertificatesParameters" ref="rootClientSslContext"/>
    </bean>
    
        <camelContext xmlns="http://camel.apache.org/schema/spring">
        <errorHandler id="infErrorHandler" type="DeadLetterChannel" deadLetterUri="log:dead?level=ERROR">
            <redeliveryPolicy maximumRedeliveries="-1" redeliveryDelay="0"/>
        </errorHandler>
        
        
        <route errorHandlerRef="infErrorHandler">
            <from uri="timer://contractRequest?repeatCount=1" />
            <setProperty name="artifactUri">
                <constant>https://example.com/some_artifact</constant>
            </setProperty>
            <process ref="contractRequestCreationProcessor" />
            <process ref="idsMultiPartOutputProcessor"/>
            <to uri="https://provider-core:28282/usageControl?awaitResponse=true&amp;connectionShareId=ucConnection&amp;sslContextParameters=#clientSslContext&amp;useIdsMessages=true"/>
            <process ref="idsMessageTypeExtractionProcessor"/>
            <choice>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'ContractResponseMessage'</simple>
                    <log message="### Handle ContractResponseMessage ###"/>
                    <process ref="contractResponseProcessor"/>
                    <to uri="https://provider-core:28282/usageControl?awaitResponse=true&amp;connectionShareId=ucConnection&amp;sslContextParameters=#clientSslContext&amp;useIdsMessages=true"/>
                    <process ref="idsMultiPartInputProcessor"/>
                    <process ref="idsMessageTypeExtractionProcessor"/>
                    <choice>
                        <when>
                            <simple>${exchangeProperty.ids-type} == 'MessageProcessedNotificationMessage'</simple>
                            <log message="### Received MessageProcessedNotificationMessage, starting artifactRequestRoute... ###"/>
                            <to uri="controlbus:route?routeId=artifactRequestRoute&amp;action=start"/>
                        </when>
                        <otherwise>
                            <log loggingLevel="ERROR" message="Expected MessageProcessedNotificationMessage, but received:\n${body}\n### Header: ###\n${headers[ids-header]}"/>
                            <removeHeader name="ids-header" />
                            <setBody><simple>${null}</simple></setBody>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <log loggingLevel="ERROR" message="Expected ContractResponseMessage, but received:\n${body}\n### Header: ###\n${headers[ids-header]}"/>
                    <removeHeader name="ids-header" />
                    <setBody><simple>${null}</simple></setBody>
                </otherwise>
            </choice>
        </route>

        <route id="artifactRequestRoute" autoStartup="false">
            <from uri="timer://tenSecondsTimer?fixedRate=true&amp;period=10000"/>
            <setProperty name="artifactUri">
                <constant>https://example.com/some_artifact</constant>
            </setProperty>
            <process ref="artifactRequestCreationProcessor" />
            <process ref="idsMultiPartOutputProcessor"/>
            <to uri="https://provider-core:28282/usageControl?awaitResponse=true&amp;connectionShareId=ucConnection&amp;sslContextParameters=#clientSslContext&amp;useIdsMessages=true"/>
            <process ref="idsMultiPartInputProcessor"/>
            <process ref="idsMessageTypeExtractionProcessor"/>
            <choice>
                <when>
                    <simple>${exchangeProperty.ids-type} == 'ArtifactResponseMessage'</simple>
                    <log message="### Handle ArtifactResponseMessage ###"/>
                    <to uri="http://echo-server:80"/>
                </when>
                <otherwise>
                    <log loggingLevel="ERROR" message="Expected ArtifactResponseMessage, but received:\n${body}\n### Header: ###\n${headers[ids-header]}"/>
                </otherwise>
            </choice>
        </route>
        
    </camelContext>

</beans>
